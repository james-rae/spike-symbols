import{T as p,s as m,aE as s}from"./spike-symbols.js";import{p as n}from"./MeshVertexAttributes-QryCwRU1.js";import{B as a}from"./vertexSpaceConversion-CSGNOoGO.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-CHH0_lWj.js";import"./computeTranslationToOriginAndRotation-BOZ_GIsK.js";import"./projectPointToVector--Cyjh7Yj.js";import"./meshVertexSpaceUtils-Bw0fuhv2.js";import"./MeshLocalVertexSpace-Bu4zF7me.js";import"./vec3-Do4v7_LQ.js";import"./BufferView-Bcke57oO.js";import"./vec42-CGd3qQJJ.js";import"./vec4-Dygmqec3.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-COEG4Ghg.js.map
